package shiller.app;

/**
 * Created with IntelliJ IDEA.
 * User: benfa
 * Date: 03/06/12
 * Time: 11.27
 * To change this template use File | Settings | File Templates.             package NewProgram;

 /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.swing.*;
import javax.swing.plaf.basic.BasicComboBoxRenderer;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.awt.*;
import java.awt.image.CropImageFilter;
import java.awt.image.FilteredImageSource;
import java.io.IOException;
import java.util.HashMap;

/**
 *
 * @author benfa
 */
public class NewRiempimento extends JDialog {

    /**
     * Creates new form NewJDialog
     */
    public NewRiempimento(Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new JScrollPane();
        jTextArea1 = new JTextArea();
        jTextField3 = new JTextField();
        jLabel1 = new JLabel();
        metriIniziali = new JTextField();
        metriFinali = new JTextField();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        tipoRiempimento = new JComboBox();
        jLabel4 = new JLabel();
        jScrollPane2 = new JScrollPane();
        infoAgg = new JTextArea();
        buttonAnnulla = new JButton();
        buttonOK = new JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);


        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Metri iniziali");

        metriIniziali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metriInizialiActionPerformed(evt);
            }
        });

        jLabel2.setText("Metri finali");

        jLabel3.setText("Tipo di Riempimento");

        /*
        NodeList list = getNodeList("riempimento");
        String[] strList = new String [list.getLength()];
        for(int i=0; i<list.getLength(); i++){
            Element e = (Element)list.item(i);
            strList[i]=e.getAttribute("name");
        }

        tipoRiempimento.setModel(new javax.swing.DefaultComboBoxModel(strList));
        */


        NodeList list = getNodeList("riempimento");
        String[] strList = new String [list.getLength()];
        String[] imgList = new String [list.getLength()];
        Integer[] intList = new Integer[list.getLength()];
        ImageIcon[] imgIconList = new ImageIcon[list.getLength()];
        for(int i=0; i<list.getLength(); i++){
            Element e = (Element)list.item(i);
            strList[i]=e.getAttribute("name");
            imgList[i]=e.getAttribute("img");
            intList[i]=new Integer(i);
            ImageIcon icon = new ImageIcon(e.getAttribute("img"));
            Image image = icon.getImage();
            image = createImage(new FilteredImageSource(image.getSource(),
                    new CropImageFilter(0, 0, 120, 50)));
            icon = new ImageIcon(image);
            imgIconList[i]= icon;
        }

        tipoRiempimento = new JComboBox(imgIconList);
        tipoRiempimento.setRenderer(new ItemRenderer());
        tipoRiempimento.setSize(120,50);

        jLabel4.setText("Informazioni aggiuntive");

        infoAgg.setColumns(20);
        infoAgg.setRows(5);
        jScrollPane2.setViewportView(infoAgg);

        buttonAnnulla.setText("Annulla");
        buttonAnnulla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAnnullaActionPerformed(evt);
            }
        });

        buttonOK.setText("OK");
        buttonOK.setToolTipText("");
        buttonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOKActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(buttonOK, GroupLayout.PREFERRED_SIZE, 89, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(buttonAnnulla, GroupLayout.PREFERRED_SIZE, 89, GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane2)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel3)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                                        .addComponent(tipoRiempimento, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(metriIniziali, GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                                                        .addComponent(jLabel1, GroupLayout.Alignment.LEADING))
                                                                .addGap(18, 18, 18)
                                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel2)
                                                                        .addComponent(metriFinali, GroupLayout.PREFERRED_SIZE, 140, GroupLayout.PREFERRED_SIZE)))
                                                        .addComponent(jLabel4))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(metriIniziali, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(metriFinali, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tipoRiempimento, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(buttonAnnulla)
                                        .addComponent(buttonOK))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void metriInizialiActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void buttonOKActionPerformed(java.awt.event.ActionEvent evt) {
        //okokokokokokokokokokokokokokokokokokokokokokokokokokokokokokokokokokok
        boolean error=false;

        double metriI=-1;
        double metriF=-1;
        int type=-1;
        String agg="";
        try{
            metriI=Double.parseDouble(metriIniziali.getText());
            metriF=Double.parseDouble(metriFinali.getText());
            NodeList list = getNodeList("riempimento");
            String[] strList = new String [list.getLength()];
            Element e = (Element)list.item(tipoRiempimento.getSelectedIndex());
            type=Integer.parseInt(e.getAttribute("id"));
            agg = infoAgg.getText();
        }catch (Exception e){
            error=true;
        }

        if(metriI<0){
            error=true;
        }
        if(metriI>=metriF)
            error=true;
        if(type<0){
            error=true;
        }

        System.out.println(type);
        if(!error){
            hm = new HashMap();
            hm.put("metriInizio", metriI);
            hm.put("metriFine", metriF);
            hm.put("type",type);
            hm.put("infoAgg",agg);
            succ =true;
            this.dispose();
        }else{
            JOptionPane.showMessageDialog(this, "Ricontrolla i dati inseriti","Errore",JOptionPane.ERROR_MESSAGE);
        }

    }

    private void buttonAnnullaActionPerformed(java.awt.event.ActionEvent evt) {
        succ=false;
        this.dispose();
    }

    public void modifica(Riempimento t){
        metriIniziali.setText(String.valueOf(t.minizio));
        metriFinali.setText(String.valueOf(t.minizio+t.mprofondita));
        tipoRiempimento.setSelectedIndex(t.type);
        infoAgg.setText(t.getInfoAgg());
    }

    public boolean getSucc(){
        return succ;
    }

    public HashMap getHm(){
        return hm;
    }
    public NodeList getNodeList(String tipo){
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = null;
        try {
            builder = factory.newDocumentBuilder();
        } catch (ParserConfigurationException e) {
            JOptionPane.showMessageDialog(null, e.getStackTrace());  //To change body of catch statement use File | Settings | File Templates.
        }
        Document doc = null;
        try {
            doc = builder.parse("strati.xml");
        } catch (SAXException e) {
            JOptionPane.showMessageDialog(null, e.getStackTrace());  //To change body of catch statement use File | Settings | File Templates.
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e.getStackTrace());  //To change body of catch statement use File | Settings | File Templates.
        }
        NodeList list = doc.getElementsByTagName(tipo);
        return list;
    }

    /**
     * @param args the command line arguments
     */

    /*
    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewRiempimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewRiempimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewRiempimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewRiempimento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                NewRiempimento dialog = new NewRiempimento(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    */
    // Variables declaration - do not modify
    private JButton buttonAnnulla;
    private JButton buttonOK;
    private JTextArea infoAgg;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JTextArea jTextArea1;
    private JTextField jTextField3;
    private JTextField metriFinali;
    private JTextField metriIniziali;
    private JComboBox tipoRiempimento;
    private HashMap hm;
    private boolean succ;
    // End of variables declaration


    class ItemRenderer extends BasicComboBoxRenderer
    {
        public Component getListCellRendererComponent(
                JList list, Object value, int index,
                boolean isSelected, boolean cellHasFocus)
        {
            super.getListCellRendererComponent(list, value, index,
                    isSelected, cellHasFocus);

            ImageIcon item = (ImageIcon)value;

            if (index == -1)
            {
                setIcon( item );
            }
            else
            {
                setIcon( item );
            }

            return this;
        }
    }

}
